<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Wallis</title>
    <link>https://Shaper-fox.github.io/categories/c#/</link>
    <description>Recent content in C# on Wallis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Jun 2020 22:19:05 +0000</lastBuildDate><atom:link href="https://Shaper-fox.github.io/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.netcore垃圾回收</title>
      <link>https://Shaper-fox.github.io/post/netcore-garbagecollection/</link>
      <pubDate>Sun, 28 Jun 2020 22:19:05 +0000</pubDate>
      
      <guid>https://Shaper-fox.github.io/post/netcore-garbagecollection/</guid>
      <description>.NetCore垃圾收集 在本节中，我们将介绍垃圾收集的概念，垃圾收集是.NET托管代码平台最重要的特性之一。 垃圾收集器(GC)管理内存的分配</description>
    </item>
    
    <item>
      <title>.netcore之Program类</title>
      <link>https://Shaper-fox.github.io/post/net-core-program_class/</link>
      <pubDate>Mon, 25 May 2020 22:19:05 +0000</pubDate>
      
      <guid>https://Shaper-fox.github.io/post/net-core-program_class/</guid>
      <description>ASP.NET Core 启动和配置 Program类，Main方法 Startup类 其中很核心的思想是(Dependency Injection，依赖注入)； 还有Io</description>
    </item>
    
    <item>
      <title>.netcore之Startup类</title>
      <link>https://Shaper-fox.github.io/post/net-core-startup_class/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Shaper-fox.github.io/post/net-core-startup_class/</guid>
      <description>Startup 类：注册服务和使用中间件** Startup类默认生成了两个方法，在这个类中主要负责注册服务和使用中间件。 Startup类的源码 在下面的源码</description>
    </item>
    
    <item>
      <title>C#语法回顾I</title>
      <link>https://Shaper-fox.github.io/post/csharp-basic/</link>
      <pubDate>Sat, 24 Aug 2019 22:19:05 +0000</pubDate>
      
      <guid>https://Shaper-fox.github.io/post/csharp-basic/</guid>
      <description>C# 重载与重写 基本定义 构造函数： 构造函数是一种特殊的方法，主要用来创建对象时初始化对象，即为对象成员变量赋初始值，总与new运算符一起使用再创</description>
    </item>
    
  </channel>
</rss>
