<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wallis</title>
    <link>https://bomir.github.io/post/</link>
    <description>Recent content in Posts on Wallis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 12 Feb 2021 21:19:05 +0000</lastBuildDate><atom:link href="https://bomir.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker底层原理介绍</title>
      <link>https://bomir.github.io/post/docker-storage/</link>
      <pubDate>Fri, 12 Feb 2021 21:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/docker-storage/</guid>
      <description>docker底层原理介绍 namespace和cgroup的简单理解 namespace:类似于编程语言的的命名空间 controll groups ： controll （system res</description>
    </item>
    
    <item>
      <title>浅谈基于redis的分布式锁</title>
      <link>https://bomir.github.io/post/base-redis-distributedlock/</link>
      <pubDate>Tue, 12 Jan 2021 21:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/base-redis-distributedlock/</guid>
      <description>一、介绍 这篇博文讲介绍如何一步步构建一个基于Redis的分布式锁。会从最原始的版本开始，然后根据问题进行调整，最后完成一个较为合理的分布式锁</description>
    </item>
    
    <item>
      <title>Docker基础篇</title>
      <link>https://bomir.github.io/post/docker-basic/</link>
      <pubDate>Fri, 08 Jan 2021 21:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/docker-basic/</guid>
      <description>Docker基础篇 第一章 Docker简介 是什么？ 问题：为什么会有 docker 的出现 一款产 品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发</description>
    </item>
    
    <item>
      <title>常用设计模式-5种创建型模式</title>
      <link>https://bomir.github.io/post/common-design-pattern-five-constructionmode/</link>
      <pubDate>Thu, 15 Oct 2020 20:51:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/common-design-pattern-five-constructionmode/</guid>
      <description>设计模式 ​ — 可复用面向对象软件的基础 总体来说， 设计模式主要分为三大类： 创建型模式： 共5种： 工厂方法模式， 抽象工厂模式， 单例模式， 建造者模式，</description>
    </item>
    
    <item>
      <title>了解redis</title>
      <link>https://bomir.github.io/post/redis-basic1/</link>
      <pubDate>Mon, 12 Oct 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/redis-basic1/</guid>
      <description>Redis.conf详解 1.配置文件 unit单位对大小写不敏感； 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1) The server is not binding explicitly to a set of addresses using the # &amp;#34;bind&amp;#34; directive. # 2) No</description>
    </item>
    
    <item>
      <title>了解微服务架构</title>
      <link>https://bomir.github.io/post/microservices-structure/</link>
      <pubDate>Fri, 25 Sep 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/microservices-structure/</guid>
      <description>P1 - 什么是微服务架构？ Loosely Coupled （松耦合） Service Oriented architecture（基于SOA架构） with bounded Context（有界上下文，局部状态；每个团队可以管理</description>
    </item>
    
    <item>
      <title>MySQL优化笔记</title>
      <link>https://bomir.github.io/post/mysql-ehancement/</link>
      <pubDate>Sun, 12 Jul 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/mysql-ehancement/</guid>
      <description>MySQL 分层、存储引擎 mysql 分层 连接层 提供与客户端连接的服务 服务层 提供各种用户使用的接口 提供 SQL 优化器（MySQL Query Optimizer） 引擎层 提供各种存</description>
    </item>
    
    <item>
      <title>.netcore垃圾回收</title>
      <link>https://bomir.github.io/post/netcore-garbagecollection/</link>
      <pubDate>Sun, 28 Jun 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/netcore-garbagecollection/</guid>
      <description>.NetCore垃圾收集 在本节中，我们将介绍垃圾收集的概念，垃圾收集是.NET托管代码平台最重要的特性之一。 垃圾收集器(GC)管理内存的分配</description>
    </item>
    
    <item>
      <title>.netcore之Program类</title>
      <link>https://bomir.github.io/post/net-core-program_class/</link>
      <pubDate>Mon, 25 May 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/net-core-program_class/</guid>
      <description>ASP.NET Core 启动和配置 Program类，Main方法 Startup类 其中很核心的思想是(Dependency Injection，依赖注入)； 还有Io</description>
    </item>
    
    <item>
      <title>.netcore之Startup类</title>
      <link>https://bomir.github.io/post/net-core-startup_class/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/net-core-startup_class/</guid>
      <description>Startup 类：注册服务和使用中间件** Startup类默认生成了两个方法，在这个类中主要负责注册服务和使用中间件。 Startup类的源码 在下面的源码</description>
    </item>
    
    <item>
      <title>redis快速入门</title>
      <link>https://bomir.github.io/post/redis-basic0/</link>
      <pubDate>Tue, 12 May 2020 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/redis-basic0/</guid>
      <description>String类型数据的扩展操作 业务场景一 大型企业级应用中，分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键id必须保证统一性，不</description>
    </item>
    
    <item>
      <title>Postman使用教程</title>
      <link>https://bomir.github.io/post/postman-learning/</link>
      <pubDate>Wed, 11 Sep 2019 22:01:57 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/postman-learning/</guid>
      <description>PostMan使用教程(一) 下载安装 1.进入postpostman官网 https://www.getpostman.com/apps ，自行下载安装，我这里下载使用的是Windows版。 2.安装完成后，</description>
    </item>
    
    <item>
      <title>彻底理解cookie session token</title>
      <link>https://bomir.github.io/post/full-know-cookie-session-token/</link>
      <pubDate>Mon, 26 Aug 2019 22:29:54 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/full-know-cookie-session-token/</guid>
      <description>发展史 很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的</description>
    </item>
    
    <item>
      <title>C#语法回顾I</title>
      <link>https://bomir.github.io/post/csharp-basic/</link>
      <pubDate>Sat, 24 Aug 2019 22:19:05 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/csharp-basic/</guid>
      <description>C# 重载与重写 基本定义 构造函数： 构造函数是一种特殊的方法，主要用来创建对象时初始化对象，即为对象成员变量赋初始值，总与new运算符一起使用再创</description>
    </item>
    
    <item>
      <title>Rest API接口测试</title>
      <link>https://bomir.github.io/post/rest-api-test/</link>
      <pubDate>Tue, 20 Aug 2019 22:48:50 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/rest-api-test/</guid>
      <description>为什么做接口测试 很多系统关联都是基于接口来实现，接口测试可以将复杂的系统关联进行简化。 接口功能比较单一，能够比较好地进行测试覆盖，也相对容易</description>
    </item>
    
    <item>
      <title>Fiddler抓包工具总结</title>
      <link>https://bomir.github.io/post/fiddler-tool/</link>
      <pubDate>Sat, 17 Aug 2019 21:03:54 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/fiddler-tool/</guid>
      <description>Fiddler介绍 Fiddler（中文名称：小提琴）是一个HTTP的调试代理，以代理服务器的方式，监听系统的Http网络数据流动，Fiddl</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://bomir.github.io/post/http/</link>
      <pubDate>Sat, 17 Aug 2019 18:56:34 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/http/</guid>
      <description>网络 HTTP 条件 GET 使用的方法？ ​ 客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传</description>
    </item>
    
    <item>
      <title>Python常见题</title>
      <link>https://bomir.github.io/post/python-common-questions/</link>
      <pubDate>Thu, 08 Aug 2019 14:45:16 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/python-common-questions/</guid>
      <description>(1)Python常见面试题1 1.Python是如何进行内存管理的？ 三个方面来回答这个问题； ①对象的引用计数机制 ②垃圾回收机制 ③内存池机制 (</description>
    </item>
    
    <item>
      <title>浅谈Tornado</title>
      <link>https://bomir.github.io/post/basic-tornado/</link>
      <pubDate>Wed, 03 Jul 2019 17:51:08 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/basic-tornado/</guid>
      <description>高并发处理框架—Tornado Tornado介绍 ​ Tornado是一个可扩展的非阻塞式Web服务器及其相关工具的开源版本。Tornado每秒</description>
    </item>
    
    <item>
      <title>web服务器纵览</title>
      <link>https://bomir.github.io/post/web-servers-choose/</link>
      <pubDate>Mon, 18 Mar 2019 19:21:41 +0000</pubDate>
      
      <guid>https://bomir.github.io/post/web-servers-choose/</guid>
      <description>web框架概览 1）网络框架及MVC架构 ​ MVC是软件工程中的一种软件架构设计模式，MVC把web应用系统分为如下3个基本部分：模型、视图、控</description>
    </item>
    
  </channel>
</rss>
